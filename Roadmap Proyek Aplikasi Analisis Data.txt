Roadmap Proyek Aplikasi Analisis Data Interaktif

Fase 1: Inisialisasi Proyek & Konfigurasi (Minggu 1)
- Persiapan Lingkungan Kerja
  - Instal Python dan Node.js.
  - Buat struktur folder utama (analisis_data_app/).
- Inisialisasi Backend
  - Buat folder backend/.
  - Inisialisasi virtual environment Python.
  - Instal dependensi: fastapi, uvicorn, pandas, scikit-learn, plotly, python-multipart.
  - Buat file main.py dengan endpoint dasar (/health).
  - Tambahkan CORS Middleware.
- Inisialisasi Frontend
  - Buat folder frontend/.
  - Jalankan npx create-next-app@latest frontend --typescript --eslint.
  - Instal: axios, react-plotly.js, plotly.js.
- Verifikasi Komunikasi
  - Jalankan backend dan frontend.
  - Buat tombol di frontend untuk memanggil endpoint /health backend.

Fase 2: Implementasi Upload Data & Preview (Minggu 2-3)
- Backend: Endpoint Upload CSV
  - Endpoint POST /upload-csv.
  - Membaca file CSV, validasi numerik, ekstrak metadata, dan simpan DataFrame sementara.
- Frontend: UI Unggah & Preview
  - Komponen upload file.
  - Tampilkan preview data (nama kolom, beberapa baris).
  - Tampilkan pesan loading/error.

Fase 3: Pra-pemrosesan Data Dasar (Minggu 4-5)
- Backend: Endpoint Pra-pemrosesan
  - Endpoint POST /preprocess-data.
  - Penanganan missing values (isi dengan rata-rata/hapus baris).
  - Simpan DataFrame hasil pra-pemrosesan.
  - Kembalikan ringkasan perubahan.
- Frontend: UI Pra-pemrosesan
  - Dropdown/radio button untuk opsi pra-pemrosesan.
  - Tombol "Lanjutkan ke Analisis".
  - Feedback visual saat proses berjalan.

Fase 4: Implementasi Model Machine Learning & Eksekusi (Minggu 6-9)
- Backend: Implementasi Fitur Analisis
  - Deteksi Anomali: Endpoint /detect-anomaly (Isolation Forest, One-Class SVM).
  - Prediksi: Endpoint /run-prediction (Random Forest, MLP; regresi/klasifikasi).
  - Segmentasi: Endpoint /perform-segmentation (K-Means, DBSCAN).
  - Setiap endpoint mengembalikan data hasil dan informasi untuk visualisasi.
- Frontend: UI Analisis
  - Dropdown/radio button untuk memilih fitur analisis.
  - Form input dinamis sesuai fitur (misal: kolom target, n_clusters).
  - Tombol "Jalankan Analisis".

Fase 5: Visualisasi & Tampilan Hasil (Minggu 10-12)
- Backend: Data untuk Visualisasi
  - Format hasil model agar mudah dirender Plotly.js (JSON arrays).
- Frontend: Visualisasi Interaktif
  - Tampilkan metrik performa (Akurasi, R2 Score, dsb).
  - Render chart interaktif (scatter plot, confusion matrix, cluster plot, dsb).
  - Pastikan fitur interaktif (zoom, pan, hover).

Fase 6: Penyempurnaan & Deployment MVP (Minggu 13+)
- Penanganan Error & Validasi
  - Validasi input di frontend dan backend.
  - Implementasi error handling dan pesan informatif.
- Penyempurnaan UI/UX
  - Perbaikan estetika dan flow aplikasi.
  - Tambahkan loading state di setiap proses.
- Dokumentasi Kode
  - Komentar kode dan README.md untuk frontend & backend.
- Deployment
  - Siapkan Dockerfile untuk backend.
  - Deploy backend ke Render/Google Cloud Run.
  - Deploy frontend ke Vercel.
  - Pastikan konfigurasi CORS benar.

Ringkasan Tugas per Fase

Fase     | Minggu | Fokus Utama
---------|--------|----------------------------------------------
Fase 1   | 1      | Inisialisasi, setup, verifikasi komunikasi
Fase 2   | 2-3    | Upload & preview data
Fase 3   | 4-5    | Pra-pemrosesan data
Fase 4   | 6-9    | Implementasi model ML & eksekusi
Fase 5   | 10-12  | Visualisasi hasil & metrik
Fase 6   | 13+    | Penyempurnaan, dokumentasi, deployment