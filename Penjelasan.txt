Penjelasan singkat :
LumenALYZE adalah aplikasi machine learning platform yang dikembangkan menggunakan arsitektur full-stack dengan backend FastAPI dan frontend Next.js TypeScript. Proyek ini menyediakan workflow lengkap untuk analisis data mulai dari upload file CSV, preprocessing data dengan berbagai strategi (handling missing values, normalisasi, outlier removal), hingga implementasi tiga kategori machine learning yaitu prediction menggunakan Random Forest dan MLP, anomaly detection dengan Isolation Forest, serta segmentation menggunakan K-Means clustering. Backend diorganisir secara modular dengan folder config, models, services, dan utils yang masing-masing memiliki tanggung jawab spesifik, sementara frontend mengimplementasikan komponen visualisasi interaktif menggunakan Plotly.js dengan chart components untuk setiap jenis analisis, dashboard untuk menampilkan hasil, dan export functionality ke format CSV/JSON/Excel. Aplikasi ini menggunakan color scheme khusus (#014F39, #FBF7C7, #E8E8E6, #120F0A) dengan typography Montserrat dan Lora, serta dilengkapi dengan error handling yang comprehensive, type safety TypeScript, dan responsive design yang mendukung workflow dari data upload hingga visualisasi hasil analisis machine learning.

Penjelasan pengerjaannya :
Proyek LumenALYZE merupakan aplikasi machine learning platform yang dikembangkan menggunakan arsitektur full-stack dengan pemisahan yang jelas antara backend dan frontend. Pada backend, terdapat file main.py yang berfungsi sebagai entry point utama aplikasi FastAPI yang menangani semua routing dan endpoint API untuk komunikasi dengan frontend. Struktur backend diorganisir secara modular dengan folder config yang berisi file settings.py untuk konfigurasi aplikasi dan chart_config.py untuk pengaturan tema visualisasi, serta folder models yang mencakup preprocessing.py untuk pipeline data preprocessing, prediction.py untuk model Random Forest dan MLP, anomaly_detection.py untuk deteksi anomali menggunakan Isolation Forest, segmentation.py untuk clustering K-Means dan DBSCAN, dan visualization.py untuk persiapan data visualisasi.

Folder services pada backend berisi analytics_service.py yang menghasilkan insights otomatis dari hasil machine learning, dashboard_service.py untuk agregasi data dashboard, dan report_service.py untuk generasi laporan PDF. Sementara itu, folder utils menyediakan data_handler.py untuk penanganan upload dan validasi file CSV, json_serializer.py untuk serialisasi JSON yang aman dari objek numpy/pandas, chart_data_formatter.py untuk formatting data chart Plotly, export_handler.py untuk fungsi export ke berbagai format, dan logger_config.py untuk konfigurasi logging aplikasi. File requirements.txt berisi semua dependencies yang diperlukan termasuk FastAPI, scikit-learn, plotly, dan library lainnya untuk mendukung fungsionalitas machine learning dan visualisasi.

Pada sisi frontend, struktur aplikasi Next.js diorganisir dengan src/app/page.tsx sebagai komponen utama yang mengimplementasikan workflow lengkap dari upload data hingga analisis machine learning, globals.css yang berisi styling komprehensif dengan color scheme khusus LumenALYZE (#014F39, #FBF7C7, #E8E8E6, #120F0A), dan layout.tsx untuk konfigurasi font Montserrat dan Lora. Folder components/charts berisi PredictionChart.tsx untuk visualisasi hasil prediksi dengan scatter plot dan perfect prediction line, AnomalyChart.tsx untuk menampilkan normal points vs anomalies dengan color coding, ClusterChart.tsx untuk visualisasi clustering dengan multiple colors per cluster, dan MetricsChart.tsx untuk menampilkan performance metrics dalam bentuk bar chart atau gauge.

Folder components/dashboard menyediakan ResultsDashboard.tsx sebagai komponen utama yang mengintegrasikan semua chart berdasarkan jenis analisis, ExportButton.tsx untuk fungsi export hasil ke format CSV/JSON/Excel, dan StatisticsPanel.tsx untuk menampilkan statistik dan metrics dalam grid layout. Folder components/visualization berisi ChartContainer.tsx sebagai wrapper component untuk chart dengan loading states dan styling konsisten, serta DataVisualization.tsx yang mengintegrasikan dengan backend endpoint /generate-chart-data untuk menghasilkan visualisasi interaktif. Konfigurasi frontend dilengkapi dengan next.config.ts yang mengoptimalkan webpack untuk plotly.js, package.json dengan dependencies lengkap termasuk react-plotly.js dan dynamic import, serta tsconfig.json untuk TypeScript configuration yang memastikan type safety di seluruh aplikasi.

